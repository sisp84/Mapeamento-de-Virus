#!/bin/bash
function Construtor(){
    path=`echo $(pwd) | rev | cut -d'/' -f 1 | rev`
    Raw_Data=/home/nome_usuario/Raw_Data
    script=`echo $0 | sed 's:./::g'`
    virus=`ls *.fasta`
    direct="Bam"
    dir=`pwd`
    Diretorio
    Mapeamento
}

function Consenso(){
    local=`echo $(pwd) | rev | cut -d'/' -f 1 | rev`
    result=`sort -k2 -n $local.txt | tail -1 | awk '{print $1}'`
    for i in `ls *.sorted.bam`;do
        amostra_sorted=`echo $i | cut -d '.' -f1 | sed "s:${local}\|_\|Virus::g"`
        for v in `ls *.fasta`;do
            virus_consenso=`echo $v | cut -d '.' -f1 | sed "s:_\|Virus::g"`
            if [[ $result == $amostra_sorted && $result == $virus_consenso ]];then 
                # call variants
                echo "------------------------------------------------------------------      "
                echo "                                                                        "
                echo "------------------------------------------------------------------      "
                echo "  Extração Consenso:Amostra:$amostra_sorted e Virus:$virus_consenso     "
                echo "               Local de Executação:$local                               "
                echo "------------------------------------------------------------------      "
                echo "                                                                        "
                echo "------------------------------------------------------------------      "
                bcftools mpileup -Ou -f $v $i | bcftools call -mv -Oz -o calls.vcf.gz
                bcftools index calls.vcf.gz
                # normalize indels
                bcftools norm -f $v calls.vcf.gz -Ob -o calls.norm.bcf
                # filter adjacent indels within 5bp
                bcftools filter --IndelGap 5 calls.norm.bcf -Ob -o calls.norm.flt-indels.bcf
                # apply variants to create consensus sequence
                cat $v | bcftools consensus calls.vcf.gz > $virus_consenso-consensus.fasta
                rm *gz* *.bcf *.fai 
            fi
        done 
    done 
}

function Grafico(){
    amostra_grafico=`echo $(pwd) | rev | cut -d'/' -f 1 | rev`
    cat coverage.txt | sed 's:genome\|complete\|encephalitis\|lineage::g' | sed 's:virus\| ::g' |
    sed 's:NC_[0-9]*.[0-9]*::g'| awk '{if (($2) > 0.0) print}' | tr -s " " > $amostra_grafico.txt
    linhas=`echo $(awk '{print $1}' $amostra_grafico.txt) | sed 's:$\|^:":g'`
    gnuplot -persist <<-EOFMarker
    line = words($linhas)
    set title "$amostra_grafico x Virus"
    set auto x
    set auto y
    set ylabel "AVG Cobertura"
    set xlabel "Virus Mapeados"
    set style data histogram
    set style fill solid
    set boxwidth 0.15 
    plot for [i=1:line] '$amostra_grafico.txt' using i:xtic(1) title "" with boxes
EOFMarker
    Consenso
}
function Plotar(){
    for s in `ls -d */`;do
        cd $s && Grafico && cd ..
    done
    #poweroff
}
function Alterar() {
    cat $pasta/$script | while read line; do
    sed 's/file/'$1'/' -i $dir/$pasta/$script
    sed 's/poweroff//' -i $dir/$pasta/$script
done
    cd $pasta && sh $script && cd ..  #Executando de forma Simuntanea
}
function Unir(){
    cat *.txt > coverage_.txt
    cat coverage_.txt | while read line; do   
        sed -r '/^[\s\t]*$/d' -i coverage_.txt
        sed 's/,/\t/' -i coverage_.txt
        break
    done
    sort coverage_.txt | uniq  > coverage.txt
    #rm $(ls -I "coverage.txt" -I "*.fasta" -I "*.sam" -I "*.sh *.bam") #exclua todos os arquivos menos esses
    rm $(ls -I "coverage.txt" -I "*.fasta" -I "*.sh" -I "*.sorted.bam")
    
    
}
function Contagem(){
    caminho=`echo $(pwd) | rev | cut -d'/' -f 1 | rev | sed 's:[0-9]::g'`
    amostra_contagem=`echo $(pwd) | rev | cut -d'/' -f 1 | rev`
    for v in `ls *.fasta`;do
        virus=`echo $v | cut -d "." -f1`
        amostra=`echo $1 | sed 's:_'$caminho'*.*::g'`
        if [ $virus == $amostra ];then
            echo "Extraindo Informacao:$amostra e Diretorio de Execucao:$amostra_contagem"
            echo "------------------------------------------------------------------      "
            echo "                                                                        "
            pileup in=$1 ref=$v out=$amostra_$virus.coverage.txt twocolumn=t
        fi
     done
     Unir
}
function Busca(){
    echo "Inciando a Transformação Bam to Sam" 
    cd $dir/$direct
    for i in `ls *.bam`;do
        name=`echo $i | cut -d '.' -f1`
        for s in `ls -d *`;do
            if [[ `echo $i | cut -d '_' -f3 | cut -d '.' -f1` == $s || 
            `echo $i | cut -d '_' -f2 | cut -d '.' -f1` == $s ]];then
                cp $i *.fasta $s/
                cd $s 
                echo "                                                                        "
                echo "------------------------------------------------------------------      "
                echo "Ordenando o Arquivo Bam:$name"
                #samtools view -h $i > $name.sam
                #Contagem $name.sam
                samtools sort -@ 20 -o $name.sorted.bam $name.bam
                samtools index -@ 20 $name.sorted.bam
                Contagem $name.sorted.bam
                cp $dir/$direct/*.py .
                cd ..
            fi
        done
    done
    rm *.bam *.fasta && Plotar
    #poweroff
}
function Bam_(){
    for i in `ls *.fasta | cut -d "." -f1`;do
        for s in `ls -d *`;do
            if [ $i == $s ];then
                echo "Movendo os Bam e os arquivos Fastas $i" 
                cp $i.fasta $dir/$direct
                cd $s
                mv *.bam $dir/$direct && cd ..
            fi
        done
    done
    Busca 
}
function Diretorio(){
    cd $Raw_Data
    for i in `ls *R1.fastq* | cut -d '_' -f1`;do
        if [ $path != 'file' ];then
            mkdir -p $dir/$direct/$i #&& cp $dir/$plotar $dir/$direct/$i
        fi
    done
    cd ..  
    #cp *.py $dir/$direct
}

function Mapeamento(){
    if [ $path != 'file' ];then
        for i in ${virus[@]};do
            pasta=$(echo $i | cut -d '.' -f1) 
            mkdir $pasta && cp $i $pasta && cp $script $pasta 
            Alterar $pasta 
        done
    Bam_
    else
        Bbmap
    fi
}
function Bbmap(){
    cd $Raw_Data
    echo "                                                                      "
    echo "         Executando o Bbmap Virus: `echo $virus | cut -d "." -f1`     "  
    echo "                                                                      " 
    for line in `ls *R1* | cut -d"_" -f1`;do
        l1=`ls ${line}_*R1*` 
        l2=`ls ${line}_*R2*`
        R1_=$(echo $l1 | cut -d '_' -f1)
        echo "------------------------------------------------------------------      "
        echo "                       Iniciando a Analise                              "
        echo "------------------------------------------------------------------      "
        echo "Amostras $l1 e $l2                                                      "
        echo "                                                                        "
        bbmap ref=$dir/$pasta/$virus \
        in1=$l1 \
        in2=$l2 \
        outm=$dir/$pasta/$line.fastq \
        outu=$dir/$pasta/"unmapped.fastq" \
        out=$dir/$pasta/'file'_$R1_.bam \
        rm -rf ref/
        gzip $dir/$pasta/$line.fastq 
        echo "Amostras $l1 e $l2                                                      "
        echo "        Mapeamento concluido do virus `echo $virus | cut -d "." -f1`    "
        echo "             Removendo Residuos                                         "
        echo "           Finalizado a Execucao                                        "
        echo "                                                                        "
    done
}
Construtor
